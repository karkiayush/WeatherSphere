package com.example.weathersphere

import android.annotation.SuppressLint
import android.os.Bundle
import android.widget.SearchView
import androidx.appcompat.app.AppCompatActivity
import com.example.weathersphere.databinding.ActivityMainBinding
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale


class MainActivity : AppCompatActivity() {
    val TAG = "Testing"
    val degreeCelcius = "\u2103"

    /*
    This line declares a property named binding with the type ActivityMainBinding. It uses the lazy delegate to initialize the binding only when it is first accessed. The inflate method is used to create an instance of the ActivityMainBinding class, which is auto-generated by the View Binding feature based on your XML layout file (usually named activity_main.xml).
    * */
    private val binding: ActivityMainBinding by lazy {
        ActivityMainBinding.inflate(layoutInflater)
    }

    /*https://api.openweathermap.org/data/2.5/weather?q=kathmandu&appid=c9454baee04c4abfa42bf5331bd37b17*/
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(binding.root)

        getWeatherData()
    }

    @SuppressLint("SimpleDateFormat")
    private fun convertUnixTimestampToTime(unixTimestamp: Long): String {
        val date =
            Date(unixTimestamp * 1000L) // Multiply by 1000 to convert seconds to milliseconds
        val sdf = SimpleDateFormat("HH:mm a") // Format the date as per your requirement
        return sdf.format(date)
    }

    @SuppressLint("SimpleDateFormat")
    fun convertUnixTimestampToDate(unixTimestamp: Long): String {
        val date =
            Date(unixTimestamp * 1000L) // Multiply by 1000 to convert seconds to milliseconds
        val sdf = SimpleDateFormat("dd MMMM yyyy", Locale.US) // Adjust the format pattern as needed
        return sdf.format(date)
    }

    fun getDayOfWeekFromTimestamp(timestamp: Long): String {
        val date = Date(timestamp * 1000L) // Multiply by 1000 to convert seconds to milliseconds
        val sdf = SimpleDateFormat(
            "EEEE",
            Locale.US
        ) // "EEEE" will give the full name of the day (e.g., Monday)
        return sdf.format(date)
    }


    private fun getWeatherData() {
        val inputFieldRef = findViewById<SearchView>(R.id.searchView)
        val retrofit = Retrofit.Builder()
            .addConverterFactory(GsonConverterFactory.create())
            .baseUrl("https://api.openweathermap.org/data/2.5/")
            .build()
            .create(ApiInterface::class.java)

        val response =
            retrofit.getWeatherData("Kathmandu", "c9454baee04c4abfa42bf5331bd37b17", "metric")
        //We need to add in the callback function, that class from where data comes
        response.enqueue(object : Callback<WeatherApp> {
            @SuppressLint("SetTextI18n")
            override fun onResponse(call: Call<WeatherApp>, response: Response<WeatherApp>) {
                val responseBody = response.body()
                if (response.isSuccessful && responseBody != null) {

                    val temp = responseBody.main.temp
                    binding.tempId.text = "$temp$degreeCelcius"

                    val maxTemp = responseBody.main.temp_max
                    binding.maxTempId.text = "Min: $maxTemp$degreeCelcius"

                    val minTemp = responseBody.main.temp_min
                    binding.minTempId.text = "Min: $minTemp$degreeCelcius"

                    val dateRawVal = responseBody.dt.toLong()
                    val weekDay = getDayOfWeekFromTimestamp(dateRawVal)
                    binding.weekDayId.text = weekDay
                    val date = convertUnixTimestampToDate(dateRawVal)
                    binding.dateId.text = date

                    val humidityRate = responseBody.main.humidity
                    binding.humidityValueId.text = humidityRate.toString()

                    val dayCondition = responseBody.weather.firstOrNull()?.main ?: "unknown"
                    binding.dayConditionId.text = dayCondition
                    binding.weatherConditionId.text = dayCondition

                    val windspeed = responseBody.wind.speed
                    binding.windSpeedValueId.text = windspeed.toString()

                    val sunsetTimeStamp = responseBody.sys.sunset.toLong()
                    val sunsetTime = convertUnixTimestampToTime(sunsetTimeStamp)
                    binding.sunSetTimeId.text = sunsetTime

                    val sunriseTimeStamp = responseBody.sys.sunrise.toLong()
                    val sunriseTime = convertUnixTimestampToTime(sunriseTimeStamp)
                    binding.sunRiseTimeId.text = sunriseTime

                    val sealevel = responseBody.main.pressure
                    binding.seaLevelValueId.text = sealevel.toString()
                }
            }

            override fun onFailure(call: Call<WeatherApp>, t: Throwable) {
                TODO("Not yet implemented")
            }

        })
    }
}